#+title: frappe

This is a workspace and not meant for others to use easily.

* Needs

- ~toyzero/cfg/~ from ~mtspimg~ branch
- ~wire-cell-toolkit/cfg/~ from ~hybrid-wcls~ branch
- WCT itself from ~hybrid-wcls~ branch
- ~wire-cell-python~ from ~master~

* What?

I want to produce a large sample of simulated data for ls4gan which
consists of:

- kinematics :: cosmic muon traversing protodune-sp and radioactive decay activity
- tracking :: Geant4, producing ionization depositions
- detsim :: WCT drift, convolution, digitization (with two FRs)
- signals :: WCT SP including DNNROI
- topo :: WCT 3D imaging

Due to different "shapes" of these parts in terms of hardware
requirements, this chain will be broken into two stages.

- kine+track :: produce through and output depo files
- sim+sp+img :: read in  depos do sim, sigproc and 3D imaging

** Stage 1

The first two require ~dunetpc~ software.  According to [[https://dune.github.io/computing-training-202105/06-intro-art-larsoft/index.html][Computing
Training 202105]] under "Examples and current workflows" the likely jobs
are close to these:

#+begin_example
 lar -n 1 -c mcc12_gen_protoDune_beam_cosmics_p1GeV.fcl -o gen.root
 lar -n 1 -c protoDUNE_refactored_g4_stage1.fcl gen.root -o g4_stage1.root
 lar -n 1 -c protoDUNE_refactored_g4_stage2_sce_datadriven.fcl g4_stage1.root -o g4_stage2.root
#+end_example

These and all ~dunetpc~ fcl are mirrored under [[file:dunetpc-job/]].

I want produce a single ~.fcl~ that runs WC/LS to output WCT depo files.
That will likely require building latest WCT and overriding the one
provided by UPS.

** Stage 2

This can run in much less memory than stage 1 and can also run with
multi cores and requires (or benefits from) GPU for DNNROI.  Depending
on how testing goes with GPU utilization we may return to ZIO now.

* Explore stage 1

It's really hard to build useful full containers for UPS ecosystem
without having them rely on CVMFS. For an attempt, ultimately in vain,
see [[https://github.com/brettviren/coups][coups]].  Instead, we use a minimal container to provide base SL7
plus extra OS packages and a layer to provide anything needed on top
of UPS ecosystem, which is drawn from CVMFS.

** Build container

#+begin_example
 cat sl7.df | docker build -t sl7plus:000
 singularity build sl7plus.sif docker-daemon://sl7plus:000
 SHELL=bash UPS_OVERRIDE='-H Linux64bit+3.10-2.17' singularity exec sl7plus.sif bash
#+end_example

** UPS/CVMFS runtime environment

In the container, this is the setup:

#+begin_example
source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh
setup dunetpc v09_31_00 -q e20:prof
#+end_example

** Aside, CVMFS dependency for data files

First, start with ~mcc12_gen_protoDune_beam_cosmics.fcl~ but strip out
the beam ~generator~.  One problem with using (fat, non-CVMFS)
containers is that data is taken from ~/stash/~.  A side-check:

#+begin_example
$ strace -o cosmic-depos.strace art -n 1 -c cosmic-depos.fcl -o gen.root
$ grep cvmfs cosmic-depos.strace |grep /stash/
stat("/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard/p_showers_210034.db", {st_mode=S_IFREG|0644, st_size=31240192, ...}) = 0
stat("/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard/He_showers_310006.db", {st_mode=S_IFREG|0644, st_size=1639424, ...}) = 0
stat("/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard/N_showers_410083.db", {st_mode=S_IFREG|0644, st_size=154624, ...}) = 0
stat("/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard/Mg_showers_510107.db", {st_mode=S_IFREG|0644, st_size=109568, ...}) = 0
stat("/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard/Fe_showers_610120.db", {st_mode=S_IFREG|0644, st_size=59392, ...}) = 0
#+end_example

Note, these few files are randomly chosen from a much larger set of 390 files under ~/standard/~:

#+begin_example
‚ùØ du -sh /cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard/
2.3G	/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard/
#+end_example

** Combine stages

First, lets get through each in piecemeal

#+begin_example
 art -n 1 -c cosmic-depos.fcl -o gen.root
 art -n 1 -c protoDUNE_refactored_g4_stage1.fcl gen.root -o g4_stage1.root
 art -n 1 -c protoDUNE_refactored_g4_stage2_sce_datadriven.fcl g4_stage1.root -o g4_stage2.root
#+end_example

The ~cosmic-depos.fcl~ is ~essentially
mcc12_gen_protoDune_beam_cosmics_p1GeV.fcl~ and will eventually hold
the latter two as well.

*** Summaries

#+begin_example
 art -n 1 -c cosmic-depos.fcl -o gen.root

================================================================================================================================
TimeTracker printout (sec)                        Min           Avg           Max         Median          RMS         nEvts   
================================================================================================================================
Full event                                      2.47219       2.47219       2.47219       2.47219          0            1     
--------------------------------------------------------------------------------------------------------------------------------
source:EmptyEvent(read)                       0.000199247   0.000199247   0.000199247   0.000199247        0            1     
simulate:cosmicgenerator:CORSIKAGen             2.44161       2.44161       2.44161       2.44161          0            1     
simulate:ar39:RadioGen                         0.012238      0.012238      0.012238      0.012238          0            1     
simulate:ar42:RadioGen                        9.7284e-05    9.7284e-05    9.7284e-05    9.7284e-05         0            1     
simulate:kr85:RadioGen                        0.00222648    0.00222648    0.00222648    0.00222648         0            1     
simulate:rn222:RadioGen                       5.1239e-05    5.1239e-05    5.1239e-05    5.1239e-05         0            1     
[art]:TriggerResults:TriggerResultInserter    4.8768e-05    4.8768e-05    4.8768e-05    4.8768e-05         0            1     
end_path:out1:RootOutput                      1.1225e-05    1.1225e-05    1.1225e-05    1.1225e-05         0            1     
end_path:out1:RootOutput(write)                0.0148903     0.0148903     0.0148903     0.0148903         0            1     
================================================================================================================================

MemReport  ---------- Memory summary [base-10 MB] ------
MemReport  VmPeak = 983.183 VmHWM = 477.192
#+end_example


#+begin_export
 art -n 1 -c protoDUNE_refactored_g4_stage1.fcl gen.root -o g4_stage1.root

================================================================================================================================
TimeTracker printout (sec)                        Min           Avg           Max         Median          RMS         nEvts   
================================================================================================================================
Full event                                      19.9149       19.9149       19.9149       19.9149          0            1     
--------------------------------------------------------------------------------------------------------------------------------
source:RootInput(read)                        0.00063679    0.00063679    0.00063679    0.00063679         0            1     
simulate:largeant:larg4Main                     13.1646       13.1646       13.1646       13.1646          0            1     
[art]:TriggerResults:TriggerResultInserter    3.9511e-05    3.9511e-05    3.9511e-05    3.9511e-05         0            1     
end_path:out1:RootOutput                       8.127e-06     8.127e-06     8.127e-06     8.127e-06         0            1     
end_path:out1:RootOutput(write)                 6.74905       6.74905       6.74905       6.74905          0            1     
================================================================================================================================

MemReport  ---------- Memory summary [base-10 MB] ------
MemReport  VmPeak = 3678.29 VmHWM = 2973.47
#+end_export


#+begin_example
 art -n 1 -c protoDUNE_refactored_g4_stage2_sce_datadriven.fcl g4_stage1.root -o g4_stage2.root

================================================================================================================================
TimeTracker printout (sec)                        Min           Avg           Max         Median          RMS         nEvts   
================================================================================================================================
Full event                                      79.8561       79.8561       79.8561       79.8561          0            1     
--------------------------------------------------------------------------------------------------------------------------------
source:RootInput(read)                        0.00054773    0.00054773    0.00054773    0.00054773         0            1     
simulate:rns:RandomNumberSaver                0.000167264   0.000167264   0.000167264   0.000167264        0            1     
simulate:IonAndScint:IonAndScint                4.32442       4.32442       4.32442       4.32442          0            1     
simulate:PDFastSim:PDFastSimPVS                 68.5491       68.5491       68.5491       68.5491          0            1     
[art]:TriggerResults:TriggerResultInserter    3.1261e-05    3.1261e-05    3.1261e-05    3.1261e-05         0            1     
end_path:out1:RootOutput                       8.384e-06     8.384e-06     8.384e-06     8.384e-06         0            1     
end_path:out1:RootOutput(write)                 6.98123       6.98123       6.98123       6.98123          0            1     
================================================================================================================================

MemReport  ---------- Memory summary [base-10 MB] ------
MemReport  VmPeak = 5249.74 VmHWM = 4484.4
#+end_example

That last job pauses for a long time on

#+begin_example
/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/PhotonPropagation/LibraryData/lib_Protodunev7_merged_avg.root
#+end_example

*** Prune

We do not need PD, which is good because by far it takes the most
time.

The last stage adds ~_sce_datadriven.fcl~ which in its entirety is:

#+begin_example
#include "protoDUNE_refactored_g4_stage2.fcl"
services.SpaceCharge.EnableSimEfieldSCE: true
services.SpaceCharge.EnableSimSpatialSCE: true
services.SpaceCharge.EnableSimulationSCE: true
#+end_example

I take the base file, adding in only ~IonAndScint~ related.  Let's see:

#+begin_example
art -n 1 -c cosmic-depos.fcl
#+end_example

Hmm,

#+begin_example
storeTrajectories set to true and a non-empty keepGenTrajectories list provided in configuration file, but none of the generators in this list are present in the event! Double check list or don't provide keepGenTrajectories in the configuration to keep all trajectories from all generator labels. This may be expected for generators that have a nonzero probability of producing no particles (e.g. some radiologicals)
...
================================================================================================================================
TimeTracker printout (sec)                        Min           Avg           Max         Median          RMS         nEvts   
================================================================================================================================
Full event                                      28.1263       28.1263       28.1263       28.1263          0            1     
--------------------------------------------------------------------------------------------------------------------------------
source:EmptyEvent(read)                       0.000265117   0.000265117   0.000265117   0.000265117        0            1     
simulate:cosmicgenerator:CORSIKAGen             3.24017       3.24017       3.24017       3.24017          0            1     
simulate:ar39:RadioGen                         0.013707      0.013707      0.013707      0.013707          0            1     
simulate:ar42:RadioGen                        4.1577e-05    4.1577e-05    4.1577e-05    4.1577e-05         0            1     
simulate:kr85:RadioGen                        0.00155516    0.00155516    0.00155516    0.00155516         0            1     
simulate:rn222:RadioGen                       0.000139854   0.000139854   0.000139854   0.000139854        0            1     
simulate:largeant:larg4Main                     11.6777       11.6777       11.6777       11.6777          0            1     
simulate:IonAndScint:IonAndScint               0.250342      0.250342      0.250342      0.250342          0            1     
[art]:TriggerResults:TriggerResultInserter    7.6718e-05    7.6718e-05    7.6718e-05    7.6718e-05         0            1     
end_path:out1:RootOutput                      2.0106e-05    2.0106e-05    2.0106e-05    2.0106e-05         0            1     
end_path:out1:RootOutput(write)                 12.5728       12.5728       12.5728       12.5728          0            1     
================================================================================================================================
...

MemReport  ---------- Memory summary [base-10 MB] ------
MemReport  VmPeak = 4869.14 VmHWM = 3900.21

ls -lh cosmicdepos_protoDUNE.root
-rw-r--r-- 1 bv bv 314M Sep 29 15:54 cosmicdepos_protoDUNE.root
#+end_example

I don't think we care about storing trajectories for now.

Let's try more events.

#+begin_example
Singularity> art -n 10 -c cosmic-depos.fcl  -o cosmic-depos-10.root

================================================================================================================================
TimeTracker printout (sec)                        Min           Avg           Max         Median          RMS         nEvts   
================================================================================================================================
Full event                                      23.0598       25.1572       28.1068       24.5905       1.69969        10     
--------------------------------------------------------------------------------------------------------------------------------
source:EmptyEvent(read)                       0.00016796     0.0021043     0.0119565    0.000880443   0.00339213       10     
simulate:cosmicgenerator:CORSIKAGen             1.72508       2.94228       3.26446       3.08662      0.428901        10     
simulate:ar39:RadioGen                         0.0131232     0.0149029     0.025086      0.0140756    0.00343602       10     
simulate:ar42:RadioGen                        3.2793e-05    0.000105121   0.00024472    7.89135e-05   6.26411e-05      10     
simulate:kr85:RadioGen                        0.00154319    0.00194375    0.00211649     0.0019761    0.000151306      10     
simulate:rn222:RadioGen                        9.787e-05    0.000154422   0.000196209   0.000161957   3.21135e-05      10     
simulate:largeant:larg4Main                     9.37619       10.1241       11.2347       9.72717       0.70946        10     
simulate:IonAndScint:IonAndScint               0.217638      0.242117       0.27958      0.237753      0.0181654       10     
[art]:TriggerResults:TriggerResultInserter    3.4319e-05    5.37734e-05   0.000210219   3.6567e-05    5.21546e-05      10     
end_path:out1:RootOutput                       7.444e-06    9.1984e-06    2.0695e-05     7.863e-06    3.84565e-06      10     
end_path:out1:RootOutput(write)                 9.74814       11.1069       12.6444       10.8967       1.04396        10     
================================================================================================================================

MemReport  ---------- Memory summary [base-10 MB] ------
MemReport  VmPeak = 5090.14 VmHWM = 4113.87

Singularity> ls -lh cosmic-depos-10.root 
-rw-r--r-- 1 bv bv 2.8G Sep 29 16:01 cosmic-depos-10.root
#+end_example


*** Purge

Next we need to see wtf is actually in that ROOT file.

#+begin_example
Begin processing the 1st record. run: 1 subRun: 0 event: 1 at 29-Sep-2021 16:06:37 EDT
PRINCIPAL TYPE: Event
PROCESS NAME | MODULE LABEL... | PRODUCT INSTANCE NAME.......................... | DATA PRODUCT TYPE.................................................... | ...SIZE
CosmicDepos. | largeant....... | LArG4DetectorServicevolAuxDetSensitiveCRTPaddle | std::vector<sim::AuxDetHit>.......................................... | ....429
CosmicDepos. | largeant....... | ............................................... | std::vector<simb::MCParticle>........................................ | .527751
CosmicDepos. | ar39........... | ............................................... | std::vector<simb::MCTruth>........................................... | ......1
CosmicDepos. | kr85........... | ............................................... | std::vector<simb::MCTruth>........................................... | ......1
CosmicDepos. | largeant....... | LArG4DetectorServicevolTPCActiveOuter.......... | std::vector<sim::SimEnergyDeposit>................................... | ...6398
CosmicDepos. | ar42........... | ............................................... | std::vector<simb::MCTruth>........................................... | ......1
CosmicDepos. | IonAndScint.... | priorSCE....................................... | std::vector<sim::SimEnergyDeposit>................................... | 1273843
CosmicDepos. | rn222.......... | ............................................... | std::vector<simb::MCTruth>........................................... | ......1
CosmicDepos. | TriggerResults. | ............................................... | art::TriggerResults.................................................. | ......1
CosmicDepos. | largeant....... | LArG4DetectorServicevolTPCActive............... | std::vector<sim::SimEnergyDeposit>................................... | 1267445
CosmicDepos. | largeant....... | ............................................... | art::Assns<simb::MCTruth,simb::MCParticle,sim::GeneratedParticleInfo> | .527751
CosmicDepos. | IonAndScint.... | ............................................... | std::vector<sim::SimEnergyDeposit>................................... | 1273843
CosmicDepos. | cosmicgenerator | ............................................... | std::vector<simb::MCTruth>........................................... | ......1
#+end_example

And, our old friend, howbig, from Daya Bay.  Looks like LS's tree
names gives an answer of "too big"....

#+begin_example
cosmic-depos-10.root
             EventHistory: raw =          755     0.00 GiB   0.00%  comp =          209     0.00 GiB   0.00%  entries =           10
             EventHistory: raw =          755     0.00 GiB          comp =          209     0.00 GiB          entries =           10
            EventMetaData: raw =         6764     0.00 GiB   0.00%  comp =          479     0.00 GiB   0.00%  entries =           10
     EventBranchEntryInfo: raw =         6764     0.00 GiB          comp =          479     0.00 GiB          entries =           10
                   Events: raw =   6705919356     6.71 GiB 100.00%  comp =   2985701395     2.99 GiB 100.00%  entries =           10
           EventAuxiliary: raw =          621     0.00 GiB          comp =          291     0.00 GiB          entries =           10
sim::AuxDetHits_largeant_LArG4DetectorServicevolAuxDetSensitiveCRTPaddle_CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
simb::MCParticles_largeant__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
simb::MCTruths_ar39__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
simb::MCTruths_kr85__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
sim::SimEnergyDeposits_largeant_LArG4DetectorServicevolTPCActiveOuter_CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
simb::MCTruths_ar42__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
sim::SimEnergyDeposits_IonAndScint_priorSCE_CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
simb::MCTruths_rn222__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
art::TriggerResults_TriggerResults__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
sim::SimEnergyDeposits_largeant_LArG4DetectorServicevolTPCActive_CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
simb::MCParticlesimb::MCTruthsim::GeneratedParticleInfoart::Assns_largeant__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
sim::SimEnergyDeposits_IonAndScint__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
simb::MCTruths_cosmicgenerator__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =           10
                FileIndex: raw =          591     0.00 GiB   0.00%  comp =          227     0.00 GiB   0.00%  entries =           12
                  Element: raw =          591     0.00 GiB          comp =          227     0.00 GiB          entries =           12
                 MetaData: raw =         6630     0.00 GiB   0.00%  comp =         1958     0.00 GiB   0.00%  entries =            1
        FileFormatVersion: raw =          120     0.00 GiB          comp =          120     0.00 GiB          entries =            1
        ProcessHistoryMap: raw =          232     0.00 GiB          comp =          232     0.00 GiB          entries =            1
          ProductRegistry: raw =         5682     0.00 GiB          comp =         1344     0.00 GiB          entries =            1
      ProductDependencies: raw =          596     0.00 GiB          comp =          262     0.00 GiB          entries =            1
                Parentage: raw =          368     0.00 GiB   0.00%  comp =          343     0.00 GiB   0.00%  entries =            3
                     Hash: raw =          165     0.00 GiB          comp =          165     0.00 GiB          entries =            3
              Description: raw =          203     0.00 GiB          comp =          178     0.00 GiB          entries =            3
          ResultsMetaData: raw =          124     0.00 GiB   0.00%  comp =          124     0.00 GiB   0.00%  entries =            1
   ResultsBranchEntryInfo: raw =          124     0.00 GiB          comp =          124     0.00 GiB          entries =            1
              ResultsTree: raw =          143     0.00 GiB   0.00%  comp =          143     0.00 GiB   0.00%  entries =            1
         ResultsAuxiliary: raw =          143     0.00 GiB          comp =          143     0.00 GiB          entries =            1
              RunMetaData: raw =          416     0.00 GiB   0.00%  comp =          213     0.00 GiB   0.00%  entries =            1
       RunBranchEntryInfo: raw =          416     0.00 GiB          comp =          213     0.00 GiB          entries =            1
                     Runs: raw =         3096     0.00 GiB   0.00%  comp =         3054     0.00 GiB   0.00%  entries =            1
             RunAuxiliary: raw =          174     0.00 GiB          comp =          156     0.00 GiB          entries =            1
sumdata::GeometryConfigurationInfo_GeometryConfigurationWriter__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =            1
sumdata::RunData_kr85__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =            1
sumdata::RunData_ar39__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =            1
sumdata::RunData_cosmicgenerator__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =            1
sumdata::RunData_rn222__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =            1
sumdata::RunData_ar42__CosmicDepos.: raw =            0          0 B          comp =            0          0 B          entries =            1
           SubRunMetaData: raw =          122     0.00 GiB   0.00%  comp =          122     0.00 GiB   0.00%  entries =            1
    SubRunBranchEntryInfo: raw =          122     0.00 GiB          comp =          122     0.00 GiB          entries =            1
                  SubRuns: raw =          178     0.00 GiB   0.00%  comp =          163     0.00 GiB   0.00%  entries =            1
          SubRunAuxiliary: raw =          178     0.00 GiB          comp =          163     0.00 GiB          entries =            1
                    Total: raw =   6705938543     6.71 GiB 100.00%  comp =   2985708430     2.99 GiB 100.00%  entries =           52
#+end_example

The art object structure in ROOT is as insane as that of UPS (at least
there is consistency).  The obvious branches are zero size???

*** Drop data

#+begin_example
art -n 1 -c cosmic-depos.fcl  -o cosmic-depos-1.root

ls -lh cosmic-depos-1.root 
-rw-r--r-- 1 bv bv 82K Sep 29 16:30 cosmic-depos-1.root

art -c eventdump.fcl cosmic-depos-1.root

PROCESS NAME | MODULE LABEL... | PRODUCT INSTANCE NAME................ | DATA PRODUCT TYPE................. | ...SIZE
CosmicDepos. | ar39........... | ..................................... | std::vector<simb::MCTruth>........ | ......?
CosmicDepos. | kr85........... | ..................................... | std::vector<simb::MCTruth>........ | ......?
CosmicDepos. | largeant....... | LArG4DetectorServicevolTPCActiveOuter | std::vector<sim::SimEnergyDeposit> | ......?
CosmicDepos. | ar42........... | ..................................... | std::vector<simb::MCTruth>........ | ......?
CosmicDepos. | IonAndScint.... | priorSCE............................. | std::vector<sim::SimEnergyDeposit> | 1830866
CosmicDepos. | rn222.......... | ..................................... | std::vector<simb::MCTruth>........ | ......?
CosmicDepos. | largeant....... | LArG4DetectorServicevolTPCActive..... | std::vector<sim::SimEnergyDeposit> | ......?
CosmicDepos. | IonAndScint.... | ..................................... | std::vector<sim::SimEnergyDeposit> | 1830866
CosmicDepos. | cosmicgenerator | ..................................... | std::vector<simb::MCTruth>........ | ......?
#+end_example

A little more

#+begin_example
Singularity> ls -lh cosmic-depos-1.root 
-rw-r--r-- 1 bv bv 78M Sep 29 16:39 cosmic-depos-1.root
PROCESS NAME | MODULE LABEL... | PRODUCT INSTANCE NAME................ | DATA PRODUCT TYPE................. | ...SIZE
CosmicDepos. | ar39........... | ..................................... | std::vector<simb::MCTruth>........ | ......?
CosmicDepos. | kr85........... | ..................................... | std::vector<simb::MCTruth>........ | ......?
CosmicDepos. | largeant....... | LArG4DetectorServicevolTPCActiveOuter | std::vector<sim::SimEnergyDeposit> | ......?
CosmicDepos. | ar42........... | ..................................... | std::vector<simb::MCTruth>........ | ......?
CosmicDepos. | rn222.......... | ..................................... | std::vector<simb::MCTruth>........ | ......?
CosmicDepos. | largeant....... | LArG4DetectorServicevolTPCActive..... | std::vector<sim::SimEnergyDeposit> | ......?
CosmicDepos. | IonAndScint.... | ..................................... | std::vector<sim::SimEnergyDeposit> | 1415535
CosmicDepos. | cosmicgenerator | ..................................... | std::vector<simb::MCTruth>........ | ......?
#+end_example

That's with

#+begin_src fcl
   outputCommands: [ "drop *", "keep sim::SimEnergyDeposits_IonAndScint__*"]
#+end_src



** A WC/LS job to run kine+tracking and dump out depos

*** Start container

#+begin_example
SHELL=bash UPS_OVERRIDE='-H Linux64bit+3.10-2.17' singularity exec --bind /cvmfs sl7plus.sif bash -l
#+end_example

*** Setup

Source this

#+begin_src bash
#!/bin/bash
source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh
setup  dunetpc v09_31_00 -q e20:prof
mycfg=$(dirname $BASH_SOURCE)/cfg
WIRECELL_PATH=$WIRECELL_FQ_DIR/share/wirecell:$mycfg
FHICL_FILE_PATH=$FHICL_FILE_PATH:$mycfg
#+end_src

*** Run

#+begin_example
art --trace -n 1 -c cfg/cosmic_depos.fcl 2>&1 | grep -v '^Depo:' 
#+end_example

We grep out the ~Depo:~ because we capped off the depo saver (a filter)
with a stupidly verbose ~DumpDepos~.  Better use a ~DepoFileSink~, but
that does not yet exist.

#+begin_example
ls -lh wcls-dump-depos.npz 
-rw-rw-r-- 1 bv bv 110M Oct  4 12:27 wcls-dump-depos.npz

gzip wcls-dump-depos.npz

ls -lh wcls-dump-depos.npz.gz 
-rw-rw-r-- 1 bv bv 32M Oct  4 12:27 wcls-dump-depos.npz.gz
#+end_example

The time usage for the dump is substantial, almost 3x what Geant4
uses:

#+begin_example
================================================================================================================================
TimeTracker printout (sec)                        Min           Avg           Max         Median          RMS         nEvts   
================================================================================================================================
Full event                                      40.9051       40.9051       40.9051       40.9051          0            1     
--------------------------------------------------------------------------------------------------------------------------------
source:EmptyEvent(read)                       0.000232168   0.000232168   0.000232168   0.000232168        0            1     
simulate:cosmicgenerator:CORSIKAGen             3.10474       3.10474       3.10474       3.10474          0            1     
simulate:ar39:RadioGen                         0.0128975     0.0128975     0.0128975     0.0128975         0            1     
simulate:ar42:RadioGen                        3.3241e-05    3.3241e-05    3.3241e-05    3.3241e-05         0            1     
simulate:kr85:RadioGen                        0.00150381    0.00150381    0.00150381    0.00150381         0            1     
simulate:rn222:RadioGen                       0.000151141   0.000151141   0.000151141   0.000151141        0            1     
simulate:largeant:larg4Main                     9.56759       9.56759       9.56759       9.56759          0            1     
simulate:IonAndScint:IonAndScint                0.32786       0.32786       0.32786       0.32786          0            1     
simulate:DumpDepos:WireCellToolkit               27.31         27.31         27.31         27.31           0            1     
[art]:TriggerResults:TriggerResultInserter    8.0066e-05    8.0066e-05    8.0066e-05    8.0066e-05         0            1     
================================================================================================================================
#+end_example


** A WC/LS job to add noise-free Voltage level

It was suggested perhaps running WCT sim and saving sparse waveforms
will be a better division between WC/LS and pure-WCT jobs.

*** Setup

Here we need WCT 0.17 and dunetpc is not yet rebuilt for it.  So, play
some tricks.

#+begin_src bash
#!/bin/bash
source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh
setup  dunetpc v09_31_00 -q e20:prof
unsetup larwirecell 
setup larwirecell v09_04_01 -q e20:prof 
# Now patch in our desired config
mycfg=$(dirname $BASH_SOURCE)/cfg
WIRECELL_PATH=/home/bv/wrk/ls4gan/toyzero/wire-cell-toolkit/cfg:/home/bv/wrk/ls4gan/toyzero/wire-cell-data:$mycfg
FHICL_FILE_PATH=$FHICL_FILE_PATH:$mycfg
#+end_src

Luckily, this seems to work fine.

*** Run

Start container as above

#+begin_example
================================================================================================================================
TimeTracker printout (sec)                        Min           Avg           Max         Median          RMS         nEvts   
================================================================================================================================
Full event                                      191.166       191.166       191.166       191.166          0            1     
--------------------------------------------------------------------------------------------------------------------------------
source:EmptyEvent(read)                       0.000222954   0.000222954   0.000222954   0.000222954        0            1     
simulate:cosmicgenerator:CORSIKAGen             3.71208       3.71208       3.71208       3.71208          0            1     
simulate:ar39:RadioGen                         0.0132742     0.0132742     0.0132742     0.0132742         0            1     
simulate:ar42:RadioGen                        4.0783e-05    4.0783e-05    4.0783e-05    4.0783e-05         0            1     
simulate:kr85:RadioGen                        0.00159469    0.00159469    0.00159469    0.00159469         0            1     
simulate:rn222:RadioGen                       0.000127216   0.000127216   0.000127216   0.000127216        0            1     
simulate:largeant:larg4Main                     10.0462       10.0462       10.0462       10.0462          0            1     
simulate:IonAndScint:IonAndScint                0.34269       0.34269       0.34269       0.34269          0            1     
simulate:DumpVolts:WireCellToolkit              176.669       176.669       176.669       176.669          0            1     
[art]:TriggerResults:TriggerResultInserter    0.000125076   0.000125076   0.000125076   0.000125076        0            1     
================================================================================================================================
#+end_example

And, file sizes

#+begin_example
-rw-rw-r-- 1 bv bv  53M Oct  4 15:40 signal-volts-apa0.tar.bz2
-rw-rw-r-- 1 bv bv  46M Oct  4 15:40 signal-volts-apa1.tar.bz2
-rw-rw-r-- 1 bv bv  45M Oct  4 15:40 signal-volts-apa2.tar.bz2
-rw-rw-r-- 1 bv bv  48M Oct  4 15:40 signal-volts-apa3.tar.bz2
-rw-rw-r-- 1 bv bv  47M Oct  4 15:40 signal-volts-apa4.tar.bz2
-rw-rw-r-- 1 bv bv  52M Oct  4 15:40 signal-volts-apa5.tar.bz2
#+end_example

*** Bugs?

FYI there seems some bug in frame name:

#+begin_example
Singularity> tar -tvf  signal-volts-apa0.tar.bz2
-rw-r--r-- bv/bv      57072128 2021-10-04 15:38 frame_*_0.npy
#+end_example

That looks like a problem in my config, probably needs an explicit tag
name.  I think there should also be a "channels" array?  That could be
a bigger problem

Also this warning, perhaps due to WCT tar streams not making the N
zero blocks at EOF that GNU tar does and which I thought were
optional.

#+begin_example
‚ùØ tar -xvf signal-volts-apa0.tar.bz2 
frame_*_0.npy
tar: A lone zero block at 111471
#+end_example

*** Results

As the name "volts" implies, these are 32 bit float arrays.  They are
also dense but zero padded.  Why do they compress so poorly?

#+begin_src python
fp = np.load("frame_*_0.npy")
print(fp.shape, fp.dtype)
(2378, 6000) dtype('float32')
plt.imshow(fp)
#+end_src

Plenty of juicy tracks, very few zeros.  Fraction with absolute value
less than given:

#+begin_example
0 0.099 < 1e-15
1 0.141 < 1e-14
2 0.204 < 1e-13
3 0.299 < 1e-12
4 0.651 < 1e-11
5 0.850 < 1e-10
6 0.959 < 1e-09
7 0.992 < 1e-08
8 1.000 < 1e-07
9 1.000 < 1e-06
#+end_example

In hindsight, the answer is obvious that the FFTs will spread value
over the entire domain.  Ie, signals are not actually "sparse".

Saving truncated 12bit ADC tier would be far more compressible but
then later adding generated electronics noise to this would require a
second creation of quantization noise.

Could maybe play some game like:

- apply scaling to get into units of ADC but keep 32bit floats
- set all values, say, in +/- 1 ADC to zero ADC

This would set the majority of the "pixels" to 0 so improve
compression and have some kind of 2nd order error effect on sub-ADC
values (which would be pushed above 1 ADC by later noise).

Or, stick with saving depos....

For that, we really should implement ~DepoFileSink~ so that we can
immediately compress the files.  This will then require WCT 0.18 to
propagate to Scisoft and/or we will need an interim method to build a
container layer from source.




** Building WCT live in container

The [[https://github.com/wirecell/wire-cell-toolkit/tree/hybrid-wcls][hybrid-wcls]] branch holds some depo I/O related components slated
for 0.18.  Here I build that branch in sl7plus+CVMFS.

#+begin_example
‚ùØ SHELL=bash UPS_OVERRIDE='-H Linux64bit+3.10-2.17' singularity exec --bind /cvmfs sl7plus.sif bash -l
Singularity> git clone -b hybrid-wcls git@github.com:WireCell/wire-cell-toolkit.git wct-sl7
bash: git: command not found
Singularity> setup git
#+end_example

Repeat

#+begin_example
Singularity> cd wct-sl7/
Singularity> source /cvmfs/larsoft.opensciencegrid.org/products/setup
Singularity> setup larwirecell          v09_04_02 -q e20:prof
#+end_example


#+begin_example
./wcb configure \
  --prefix=$(pwd)/install \
  --with-eigen-include=$EIGEN_INC \
  --with-jsonnet=$GOJSONNET_FQ_DIR \
  --with-jsoncpp=$JSONCPP_FQ_DIR \
  --with-tbb=$TBB_FQ_DIR \
  --with-spdlog=$SPDLOG_FQ_DIR \
  --with-spdlog-lib=$SPDLOG_LIB \
  --boost-include=$BOOST_INC --boost-lib=$BOOST_LIB --boost-mt 
./wcb --notests install -p
#+end_example

*** Environment

This needs all of dunetpc, and with ~wirecell v0_17_0~ and then to trick
into using our build.

#+begin_example
Singularity> source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh
Singularity> setup dunetpc v09_32_00 -q e20:prof
#+end_example

Fix all the unwanted UPS env:

#+begin_example
Singularity> cd /home/bv/wrk/ls4gan/frappe/wct-sl7

WIRECELL_DIR=$(pwd)/install
WIRECELL_FQ_DIR=$WIRECELL_DIR
WIRECELL_INC=$WIRECELL_DIR/include
WIRECELL_VERSION=v0_17_0dev          # invent
WIRECELL_LIB=$WIRECELL_DIR/lib64
#+end_example

Patch up PATHs

#+begin_example
LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | tr ':' '\n' | grep -v /wirecell/ | grep -v $WIRECELL_LIB | grep -v '^[[:space:]]*$' | tr '\n' ':' )$WIRECELL_LIB

PATH=$(echo $PATH | tr ':' '\n' | grep -v /wirecell/ | grep -v $WIRECELL_FQ_DIR | grep -v '^[[:space:]]*$' | tr '\n' ':' )$WIRECELL_FQ_DIR/bin
#+end_example

Point to our cfg files.

#+begin_example
WIRECELL_PATH=~/wrk/ls4gan/frappe/cfg:~/wrk/ls4gan/frappe/wct-sl7/cfg:~/wrk/ls4gan/toyzero/wire-cell-data
#+end_example

*** Run

#+begin_example
Singularity> which wire-cell
~/wrk/ls4gan/frappe/wct-sl7/install/bin/wire-cell
Singularity> wire-cell -h
Singularity> art -n1  -c cfg/cosmic_depos.fcl
Singularity> art -n 10  -c cfg/cosmic_depos.fcl
Singularity> ls -lh cosmic-depos.tar.bz2
-rw-rw-r-- 1 bv bv 186M Oct  8 10:46 cosmic-depos.tar.bz2
Singularity> tar -tvf cosmic-depos.tar.bz2
-rw-r--r-- bv/bv      36749484 2021-10-08 10:42 depo_data_0.npy
-rw-r--r-- bv/bv      20999760 2021-10-08 10:43 depo_info_0.npy
-rw-r--r-- bv/bv      47008516 2021-10-08 10:43 depo_data_1.npy
-rw-r--r-- bv/bv      26862064 2021-10-08 10:43 depo_info_1.npy
-rw-r--r-- bv/bv      40527132 2021-10-08 10:43 depo_data_2.npy
-rw-r--r-- bv/bv      23158416 2021-10-08 10:43 depo_info_2.npy
-rw-r--r-- bv/bv      37308896 2021-10-08 10:44 depo_data_3.npy
-rw-r--r-- bv/bv      21319424 2021-10-08 10:44 depo_info_3.npy
-rw-r--r-- bv/bv      46822344 2021-10-08 10:44 depo_data_4.npy
-rw-r--r-- bv/bv      26755680 2021-10-08 10:44 depo_info_4.npy
-rw-r--r-- bv/bv      41794328 2021-10-08 10:45 depo_data_5.npy
-rw-r--r-- bv/bv      23882528 2021-10-08 10:45 depo_info_5.npy
-rw-r--r-- bv/bv      46552956 2021-10-08 10:45 depo_data_6.npy
-rw-r--r-- bv/bv      26601744 2021-10-08 10:45 depo_info_6.npy
-rw-r--r-- bv/bv      45576764 2021-10-08 10:45 depo_data_7.npy
-rw-r--r-- bv/bv      26043920 2021-10-08 10:46 depo_info_7.npy
-rw-r--r-- bv/bv      39564800 2021-10-08 10:46 depo_data_8.npy
#+end_example

Where's the rest of 8 and 9???

Rerunning after apparently no code change(?) gets all 10 sets.  Not
sure what happened there!

#+begin_example
‚ùØ ls -lh cosmic-depos.tar.bz2
-rw-rw-r-- 1 bv bv 176M Oct  8 11:04 cosmic-depos.tar.bz2
‚ùØ tar -tvf cosmic-depos.tar.bz2
-rw-r--r-- bv/bv      33936884 2021-10-08 11:01 depo_data_0.npy
-rw-r--r-- bv/bv      19392560 2021-10-08 11:01 depo_info_0.npy
-rw-r--r-- bv/bv      37418432 2021-10-08 11:01 depo_data_1.npy
-rw-r--r-- bv/bv      21382016 2021-10-08 11:01 depo_info_1.npy
-rw-r--r-- bv/bv      44919184 2021-10-08 11:01 depo_data_2.npy
-rw-r--r-- bv/bv      25668160 2021-10-08 11:01 depo_info_2.npy
-rw-r--r-- bv/bv      38427216 2021-10-08 11:02 depo_data_3.npy
-rw-r--r-- bv/bv      21958464 2021-10-08 11:02 depo_info_3.npy
-rw-r--r-- bv/bv      48970392 2021-10-08 11:02 depo_data_4.npy
-rw-r--r-- bv/bv      27983136 2021-10-08 11:02 depo_info_4.npy
-rw-r--r-- bv/bv      46058504 2021-10-08 11:03 depo_data_5.npy
-rw-r--r-- bv/bv      26319200 2021-10-08 11:03 depo_info_5.npy
-rw-r--r-- bv/bv      45162140 2021-10-08 11:03 depo_data_6.npy
-rw-r--r-- bv/bv      25806992 2021-10-08 11:03 depo_info_6.npy
-rw-r--r-- bv/bv      41294584 2021-10-08 11:04 depo_data_7.npy
-rw-r--r-- bv/bv      23596960 2021-10-08 11:04 depo_info_7.npy
-rw-r--r-- bv/bv      38295588 2021-10-08 11:04 depo_data_8.npy
-rw-r--r-- bv/bv      21883248 2021-10-08 11:04 depo_info_8.npy
-rw-r--r-- bv/bv      34427472 2021-10-08 11:04 depo_data_9.npy
-rw-r--r-- bv/bv      19672896 2021-10-08 11:04 depo_info_9.npy
#+end_example

*** Logging

Also, changed logging.  Reminded of one thing and discovered another:
the new logging setup has per-group streams and each stream when saved
to file is buffered separately.  As such when used like:

#+begin_src fcl
      logsinks: ["wcls-dump-depos.log"]
      loglevels: ["debug"]
#+end_src

One then sees per-stream time order which is actually handy.  A simple
~sort~ will interleave the streams into full time order.  The buffering
was a bit disconcerting first time as the log file stays zero size
until the end.

Can cover all bases with:

#+begin_src fcl
      logsinks: ["stderr", "stdout", "wcls-dump-depos.log"]
      loglevels: ["debug"]
#+end_src

#+begin_example
Singularity> art -n 2 -c cfg/cosmic_depos.fcl > wcls-dump-depos.artlog
#+end_example




** Containerize the build and its product

We want to provide an image with an updated WCT that is pre-built on
top of UPS WC/LS.  And we want to use that build in two types of
containers:

- fat :: Scisoft+WCT is the 20GB+ image for HPC or others that do not allow CVMFS and which provides UPS products directly.

- thin :: CVMFS+WCT is a smaller image which relies on CVMFS at run time for UPS products.

The *thin* is produced from the *fat* by using the Dockerfile ~COPY~ to copy
the results of the WCT compilation done in producing *fat*.

First, we need a fat container

#+begin_example
‚ùØ coups update
‚ùØ coups container -o build-larsoft-09.32.00.sh \
   larsoft-09.32.00-Linux64bit+3.10-2.17-s112-e20-prof_MANIFEST.txt
‚ùØ bash build-larsoft-09.32.00.sh
#+end_example


Then, the updated WCT layer is [[file:dfs/wctnew/]].

#+begin_example
‚ùØ cd dfs/wctnew/
‚ùØ docker build -t wctnew .
‚ùØ cat thinner.df | docker build -t wctnewthin -
‚ùØ docker image ls
REPOSITORY                     TAG                           IMAGE ID       CREATED          SIZE
wctnewthin                     latest                        1f94a1d16981   5 seconds ago    694MB
wctnew                         latest                        055563e4b622   8 minutes ago    21.4GB
brettviren/coups-larsoft       09.32.00-slf7-prof-e20-s112   64b7a97140dd   20 minutes ago   21GB
brettviren/coups-larsoftobj    09.10.01-slf7-prof-e20        cdfe425dea6e   32 minutes ago   8.86GB
brettviren/coups-larwire       09.04.01-slf7-prof-e20-s112   5107f38a7139   33 minutes ago   8.82GB
brettviren/coups-ifdh          2.12.04-slf7-prof-e20         aa1998cf0ad8   34 minutes ago   7.48GB
brettviren/coups-art           3.09.03-slf7-prof-e20         717dbf3c8f82   34 minutes ago   7.36GB
brettviren/coups-canvas_base   3.12.04-slf7-prof-e20         2136a951f48e   35 minutes ago   7.14GB
brettviren/coups-slf7-base     0.1                           f2118874af94   42 minutes ago   600MB
#+end_example

If supporting a particular experiment, this ~wctnewthin~ image could be
made yet thinner by purging unnecessary files from
~/opt/wct/share/wirecell~.



** Bring in GPU

* Explore stage 2

** Build

First step is build WCT with libtorch for DNNROI.  I do this on native
Debian.

#+begin_example
‚ùØ sudo apt install libtorch-dev  # gives 1.7
#+end_example

This does not provide a ~pkg-config~ file so must give
~--with-torch=/usr~.  TBB and boost from Debian 11, though just
released, are too old so take from my own install.  ~spdlog~ is maybe
okay from Debian but it's (1.8.1) also older than what I have (1.9.2)
installed locally.

#+begin_example
  ‚ùØ ./wcb configure --prefix=(pwd)/install \
    --with-jsonnet=$HOME/opt/jsonnet \
    --with-jsonnet-libs=gojsonnet \
    --with-tbb=$HOME/opt/oneapi-tbb-2021.3.0 \
    --with-tbb-include=$HOME/opt/oneapi-tbb-2021.3.0/include \
    --with-tbb-lib=$HOME/opt/oneapi-tbb-2021.3.0//lib/intel64/gcc4.8 \
    --boost-include=$HOME/opt/boost-1-76-0/include/ \
    --boost-libs=$HOME/opt/boost-1-76-0/lib \
    --boost-mt \
    --with-spdlog=$HOME/opt/spdlog \
    --with-libtorch=/usr
  ‚ùØ ./wcb --notests -p install  
#+end_example

** Configure

DNN ROI means ~DNNROIFinder~ frame filter node which uses a ~TorchScript~
tensor filter node as a "service" type component.  There is some
testing and possible development needed here.  The issues:

- ~TorchScript~ component may not be thread safe
- Used as a service shared between per-APA components it may need a lock
- Used as per-APA nodes, there is concern over memory usage
- Used as a singular node, WCT will need a new node category which
  supports an async "switch yard" N-to-1-to-N pattern.

This progression of job config will be tried:

1. an initial single-APA job so that the above issues are not faced

2. simple extension to 6-APA job to check for memory problems

3. if memory problem is found, then move to sharing one ~TorchScript~ with 6 ~DNNROIFinder~'s

4. if that shows a thread problem, add a lock to ~TorchScript~.


*** Single-APA job

The model file is [[https://github.com/HaiwangYu/Pytorch-UNet/raw/master/ts-model/unet-l23-cosmic500-e50.ts][here]], (50 MB).

Example config is [[https://github.com/HaiwangYu/wct-analysis/blob/master/ml-sp/dec-to-dnnsp.jsonnet#L254][here]].

Note, we need [[https://github.com/HaiwangYu/wct-analysis/blob/master/ml-sp/dec-to-dnnsp.jsonnet#L118][novel SP config]]

- [[file:cfg/main-one-apa.jsonnet]] exercise a single APA
- [[file:cfg/main-all-apa.jsonnet]] for all 6 APAs

Both read a ~cosmic-depos.tar.bz2~ file as made above.

