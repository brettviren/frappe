//#include "services_dune.fcl"
#include "services_protodune_singlephase.fcl"

#include "larg4services_dune.fcl"

// #include "services_refactored_pdune.fcl"
BEGIN_PROLOG

protodune_refactored_simulation_services: 
{
  @table::protodune_simulation_services
  ParticleInventoryService:     @local::standard_particleinventoryservice
//  PhotonBackTrackerService:     @local::dunefd_photonbacktrackerservice
}

protodune_larg4_services: 
{
  @table::common_larg4_services

  ParticleListAction: @local::dune_particle_list_action
  PhysicsList:        @local::dune_physics_list_fastoptical
  LArG4Detector:      @local::protodune_larg4detector
}


wcls_dump_depos:
{
   module_type: WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["TbbFlow"]
      plugins: ["WireCellGen", "WireCellSio", "WireCellTbb",
         "WireCellLarsoft"]
      configs: ["wcls-dump-depos.jsonnet"]
      inputers: ["wclsSimDepoSource"]
      outputers: []
      # not, file sinks buffer per stream.
      logsinks: ["stderr", "stdout", "wcls-dump-depos.log"]
      loglevels: ["debug"]
      # params: {
      #    depo_input_label: "IonAndScint"
      #    # fixme: switch to .tar.bz2 when we have sio::DepoFileSink
      #    depo_file_name: "wcls-dump-depos.npz"
      # }
   }
}
END_PROLOG



#include "singles_dune.fcl"
#include "corsika_protodune.fcl"
#include "dune_radiological_model.fcl"

#include "LArG4_dune.fcl"

#include "IonAndScint_dune.fcl"

process_name: CosmicDepos

services:
{
   # Load the service that manages root files for histograms.
   TFileService: { fileName: "cosmicdepos_protoDUNE_hist.root" }
   TimeTracker:       @local::dune_time_tracker
   MemoryTracker:     @local::dune_memory_tracker
   RandomNumberGenerator: {} #ART native random number generator
   FileCatalogMetadata:  @local::art_file_catalog_mc
   @table::protodune_simulation_services
   @table::protodune_larg4_services
   @table::protodune_refactored_simulation_services
   NuRandomService:       @local::dune_prod_seedservice
}

#Start each new event with an empty event.
source:
{
   module_type: EmptyEvent
   timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
   maxEvents:   1000000
   firstRun:    1           # Run number to use for this file
   firstEvent:  1           # number of first event in the file
}

physics:
{
   producers:
   {
      cosmicgenerator: @local::protodune_corsika_cmc  
      ar39:  @local::protodunesp_39ar
      ar42:  @local::protodunesp_42ar
      kr85:  @local::protodunesp_85kr
      rn222: @local::protodunesp_222rn
      largeant: @local::protodune_larg4
      IonAndScint: @local::protodune_ionandscint
      DumpDepos: @local::wcls_dump_depos
   }

   simulate: [ cosmicgenerator, ar39, ar42, kr85, rn222, largeant, IonAndScint, DumpDepos ]
   
   # stream1:  [ DumpDepos ]

   #trigger_paths is a keyword and contains the paths that modify the art::event, 
   #ie filters and producers
   trigger_paths: [simulate] 

   #end_paths is a keyword and contains the paths that do not modify the art::Event, 
   #ie analyzers and output streams.  these all run simultaneously
   # end_paths:     [stream1]  
}

